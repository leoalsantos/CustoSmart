const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const multer = require("multer");
const path = require("path");
const fs = require("fs");
const sharp = require("sharp");
const AWS = require("aws-sdk");
const { Pool } = require("pg");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
require("dotenv").config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

// Middleware
app.use(express.json());
app.use("/uploads", express.static(path.join(__dirname, "uploads"))); // Servir arquivos locais para fallback

// JWT Secret
const JWT_SECRET = process.env.JWT_SECRET || "supersecretkey";

// AWS S3 Configuration
const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION,
});

// Multer Configuration
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, "uploads/"),
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9) + path.extname(file.originalname);
    cb(null, `compressed-${uniqueSuffix}`);
  },
});
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    const allowedMimeTypes = ["image/jpeg", "image/png", "image/gif"];
    if (allowedMimeTypes.includes(file.mimetype)) cb(null, true);
    else cb(new Error("Formato de arquivo não suportado. Use JPEG, PNG ou GIF."));
  },
  limits: { fileSize: 5 * 1024 * 1024 }, // Limite de 5MB
});

// Helper: Compactar imagem
async function compressImage(filePath) {
  const compressedPath = filePath.replace(/(\.\w+)$/, "-compressed$1");
  await sharp(filePath).resize({ width: 300, height: 300 }).toFile(compressedPath);
  return compressedPath;
}

// Helper: Upload para S3
async function uploadToS3(filePath, fileName) {
  const fileStream = fs.createReadStream(filePath);
  const params = {
    Bucket: process.env.AWS_BUCKET_NAME,
    Key: `profile-pictures/${fileName}`,
    Body: fileStream,
    ContentType: "image/jpeg",
  };
  const uploadResult = await s3.upload(params).promise();
  fs.unlinkSync(filePath); // Remover arquivo local após upload
  return uploadResult.Location; // URL do arquivo
}

// Middleware: Validação de Token JWT
function authenticateToken(req, res, next) {
  const token = req.headers.authorization?.split(" ")[1];
  if (!token) return res.status(401).send("Acesso negado. Token não fornecido.");
  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.status(403).send("Token inválido.");
    req.user = user;
    next();
  });
}

// Adicionar avatar padrão para novos usuários
const DEFAULT_AVATAR = "/uploads/default-avatar.png";

// Rota: Registrar usuário
app.post("/register", async (req, res) => {
  const { username, email, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    await pool.query(
      "INSERT INTO users (username, email, password_hash, photo_url) VALUES ($1, $2, $3, $4)",
      [username, email, hashedPassword, DEFAULT_AVATAR]
    );
    res.status(201).send("Usuário registrado com sucesso!");
  } catch (error) {
    res.status(500).send("Erro ao registrar usuário: " + error.message);
  }
});

// Rota: Login do usuário
app.post("/login", async (req, res) => {
  const { email, password } = req.body;
  try {
    const result = await pool.query("SELECT * FROM users WHERE email = $1", [email]);
    if (result.rows.length === 0) return res.status(401).send("Credenciais inválidas.");

    const user = result.rows[0];
    const isValidPassword = await bcrypt.compare(password, user.password_hash);
    if (!isValidPassword) return res.status(401).send("Credenciais inválidas.");

    const token = jwt.sign({ userId: user.id, username: user.username }, JWT_SECRET);
    res.json({ token });
  } catch (error) {
    res.status(500).send("Erro ao fazer login: " + error.message);
  }
});

// Rota: Upload de foto de perfil
app.put("/users/:id/photo", authenticateToken, upload.single("photo"), async (req, res) => {
  const { id } = req.params;
  try {
    const result = await pool.query("SELECT photo_url FROM users WHERE id = $1", [id]);
    if (result.rows.length === 0) return res.status(404).send("Usuário não encontrado.");
    const compressedPath = await compressImage(req.file.path);
    const photoUrl = await uploadToS3(compressedPath, req.file.filename);

    await pool.query("UPDATE users SET photo_url = $1 WHERE id = $2", [photoUrl, id]);
    res.send({ message: "Foto do perfil atualizada com sucesso!", photoUrl });
  } catch (error) {
    res.status(500).send("Erro ao atualizar a foto do perfil: " + error.message);
  }
});

// Rota: Enviar mensagem
app.post("/messages", authenticateToken, async (req, res) => {
  const { channelId, content } = req.body;
  try {
    await pool.query("INSERT INTO messages (channel_id, user_id, content) VALUES ($1, $2, $3)", [
      channelId,
      req.user.userId,
      content,
    ]);
    io.to(channelId).emit("newMessage", { userId: req.user.userId, content });

    // Mensagem automática ativada
    const autoReply = "Olá! Esta é uma resposta automática.";
    if (content.includes("?")) {
      await pool.query("INSERT INTO messages (channel_id, user_id, content) VALUES ($1, $2, $3)", [
        channelId,
        0, // ID do sistema
        autoReply,
      ]);
      io.to(channelId).emit("newMessage", { userId: 0, content: autoReply });
    }

    res.send("Mensagem enviada.");
  } catch (error) {
    res.status(500).send("Erro ao enviar mensagem: " + error.message);
  }
});

// WebSocket: Notificação de som e navegador
io.on("connection", (socket) => {
  console.log("Usuário conectado");

  socket.on("joinChannel", (channelId) => {
    socket.join(channelId);
  });

  socket.on("disconnect", () => {
    console.log("Usuário desconectado");
  });
});

// Iniciar servidor
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`Servidor rodando na porta ${PORT}`));